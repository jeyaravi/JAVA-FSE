import java.util.Arrays;

public class OrderSorting {

    public static void main(String[] args) {
        Order[] orders = {
            new Order("001", "Alice", 250.75),
            new Order("002", "Bob", 150.50),
            new Order("003", "Charlie", 450.00),
            new Order("004", "David", 300.20)
        };

        // Bubble Sort
        System.out.println("Bubble Sort:");
        SortingAlgorithms.bubbleSort(orders);
        printOrders(orders);

        // Reset orders array for Quick Sort
        orders = new Order[] {
            new Order("001", "Alice", 250.75),
            new Order("002", "Bob", 150.50),
            new Order("003", "Charlie", 450.00),
            new Order("004", "David", 300.20)
        };

        // Quick Sort
        System.out.println("Quick Sort:");
        SortingAlgorithms.quickSort(orders, 0, orders.length - 1);
        printOrders(orders);
    }

    private static void printOrders(Order[] orders) {
        for (Order order : orders) {
            System.out.println(order);
        }
    }
}

class Order {
    private String orderId;
    private String customerName;
    private double totalPrice;

    public Order(String orderId, String customerName, double totalPrice) {
        this.orderId = orderId;
        this.customerName = customerName;
        this.totalPrice = totalPrice;
    }

    public String getOrderId() { return orderId; }
    public String getCustomerName() { return customerName; }
    public double getTotalPrice() { return totalPrice; }

    @Override
    public String toString() {
        return "Order{" +
                "orderId='" + orderId + '\'' +
                ", customerName='" + customerName + '\'' +
                ", totalPrice=" + totalPrice +
                '}';
    }
}

class SortingAlgorithms {

    public static void bubbleSort(Order[] orders) {
        int n = orders.length;
        boolean swapped;
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - 1 - i; j++) {
                if (orders[j].getTotalPrice() > orders[j + 1].getTotalPrice()) {
                    // Swap orders[j] and orders[j + 1]
                    Order temp = orders[j];
                    orders[j] = orders[j + 1];
                    orders[j + 1] = temp;
                    swapped = true;
                }
            }
            // If no two elements were swapped, the array is sorted
            if (!swapped) break;
        }
    }

    public static void quickSort(Order[] orders, int low, int high) {
        if (low < high) {
            int pi = partition(orders, low, high);

            quickSort(orders, low, pi - 1);  // Recursively sort elements before partition
            quickSort(orders, pi + 1, high); // Recursively sort elements after partition
        }
    }

    private static int partition(Order[] orders, int low, int high) {
        double pivot = orders[high].getTotalPrice();
        int i = (low - 1); // Index of smaller element

        for (int j = low; j < high; j++) {
            // If current element is less than or equal to pivot
            if (orders[j].getTotalPrice() <= pivot) {
                i++;
                // Swap orders[i] and orders[j]
                Order temp = orders[i];
                orders[i] = orders[j];
                orders[j] = temp;
            }
        }

        // Swap orders[i + 1] and orders[high] (or pivot)
        Order temp = orders[i + 1];
        orders[i + 1] = orders[high];
        orders[high] = temp;

        return i + 1;
    }
}


OUTPUT

Bubble Sort:
Order{orderId='002', customerName='Bob', totalPrice=150.5}
Order{orderId='001', customerName='Alice', totalPrice=250.75}
Order{orderId='004', customerName='David', totalPrice=300.2}
Order{orderId='003', customerName='Charlie', totalPrice=450.0}

Quick Sort:
Order{orderId='002', customerName='Bob', totalPrice=150.5}
Order{orderId='001', customerName='Alice', totalPrice=250.75}
Order{orderId='004', customerName='David', totalPrice=300.2}
Order{orderId='003', customerName='Charlie', totalPrice=450.0}
