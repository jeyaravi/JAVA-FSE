Define the Product Class

public class Product {
    private String productId;
    private String productName;
    private int quantity;
    private double price;

    public Product(String productId, String productName, int quantity, double price) {
        this.productId = productId;
        this.productName = productName;
        this.quantity = quantity;
        this.price = price;
    }

    // Getters and Setters
    public String getProductId() { return productId; }
    public void setProductId(String productId) { this.productId = productId; }

    public String getProductName() { return productName; }
    public void setProductName(String productName) { this.productName = productName; }

    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }

    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }
}

Using a HashMap to store products:

import java.util.HashMap;

public class InventoryManagementSystem {
    private HashMap<String, Product> inventory;

    public InventoryManagementSystem() {
        this.inventory = new HashMap<>();
    }

    public void addProduct(Product product) {
        inventory.put(product.getProductId(), product);
    }

    public void updateProduct(Product product) {
        if (inventory.containsKey(product.getProductId())) {
            inventory.put(product.getProductId(), product);
        } else {
            System.out.println("Product not found in the inventory.");
        }
    }

    public void deleteProduct(String productId) {
        if (inventory.containsKey(productId)) {
            inventory.remove(productId);
        } else {
            System.out.println("Product not found in the inventory.");
        }
    }

    public Product getProduct(String productId) {
        return inventory.get(productId);
    }

    public static void main(String[] args) {
        InventoryManagementSystem ims = new InventoryManagementSystem();

        Product product1 = new Product("001", "Product1", 100, 10.0);
        ims.addProduct(product1);

        Product product2 = new Product("002", "Product2", 200, 20.0);
        ims.addProduct(product2);

        System.out.println(ims.getProduct("001").getProductName());

        product1.setPrice(12.0);
        ims.updateProduct(product1);

        ims.deleteProduct("002");
    }
}


ANOTHER WAY

import java.util.HashMap;

public class InventoryManagementSystem {
    private HashMap<String, Product> inventory;

    public InventoryManagementSystem() {
        this.inventory = new HashMap<>();
    }

    public void addProduct(Product product) {
        inventory.put(product.getProductId(), product);
        System.out.println("Added Product: " + product);
    }

    public void updateProduct(Product product) {
        if (inventory.containsKey(product.getProductId())) {
            inventory.put(product.getProductId(), product);
            System.out.println("Updated Product: " + product);
        } else {
            System.out.println("Product not found in the inventory.");
        }
    }

    public void deleteProduct(String productId) {
        if (inventory.containsKey(productId)) {
            inventory.remove(productId);
            System.out.println("Deleted Product with ID: " + productId);
        } else {
            System.out.println("Product not found in the inventory.");
        }
    }

    public Product getProduct(String productId) {
        return inventory.get(productId);
    }

    public static void main(String[] args) {
        InventoryManagementSystem ims = new InventoryManagementSystem();

        Product product1 = new Product("001", "Product1", 100, 10.0);
        ims.addProduct(product1);

        Product product2 = new Product("002", "Product2", 200, 20.0);
        ims.addProduct(product2);

        System.out.println("Retrieved Product: " + ims.getProduct("001"));

        product1.setPrice(12.0);
        ims.updateProduct(product1);

        ims.deleteProduct("002");

        // Attempt to delete a product that doesn't exist
        ims.deleteProduct("003");

        // Attempt to update a product that doesn't exist
        Product product3 = new Product("003", "Product3", 150, 15.0);
        ims.updateProduct(product3);
    }
}

class Product {
    private String productId;
    private String productName;
    private int quantity;
    private double price;

    public Product(String productId, String productName, int quantity, double price) {
        this.productId = productId;
        this.productName = productName;
        this.quantity = quantity;
        this.price = price;
    }

    // Getters and Setters
    public String getProductId() { return productId; }
    public void setProductId(String productId) { this.productId = productId; }

    public String getProductName() { return productName; }
    public void setProductName(String productName) { this.productName = productName; }

    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }

    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }

    @Override
    public String toString() {
        return "Product{" +
                "productId='" + productId + '\'' +
                ", productName='" + productName + '\'' +
                ", quantity=" + quantity +
                ", price=" + price +
                '}';
    }
}


OUTPUT

Added Product: Product{productId='001', productName='Product1', quantity=100, price=10.0}
Added Product: Product{productId='002', productName='Product2', quantity=200, price=20.0}
Retrieved Product: Product{productId='001', productName='Product1', quantity=100, price=10.0}
Updated Product: Product{productId='001', productName='Product1', quantity=100, price=12.0}
Deleted Product with ID: 002
Product not found in the inventory.
Product not found in the inventory.
