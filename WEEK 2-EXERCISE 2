Scenario 1:

CREATE OR REPLACE PROCEDURE SafeTransferFunds (
    p_from_account_id IN NUMBER,
    p_to_account_id IN NUMBER,
    p_amount IN NUMBER
) IS
    insufficient_funds EXCEPTION;
BEGIN
    -- Check if the from_account has sufficient funds
    DECLARE
        v_balance NUMBER;
    BEGIN
        SELECT balance INTO v_balance FROM accounts WHERE account_id = p_from_account_id;
        IF v_balance < p_amount THEN
            RAISE insufficient_funds;
        END IF;
    END;

    -- Perform the transfer
    UPDATE accounts
    SET balance = balance - p_amount
    WHERE account_id = p_from_account_id;

    UPDATE accounts
    SET balance = balance + p_amount
    WHERE account_id = p_to_account_id;

    COMMIT;
EXCEPTION
    WHEN insufficient_funds THEN
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in the source account.');
        ROLLBACK;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: An unexpected error occurred during fund transfer.');
        ROLLBACK;
END SafeTransferFunds;

Scenario 2:

CREATE OR REPLACE PROCEDURE UpdateSalary (
    p_employee_id IN NUMBER,
    p_percentage IN NUMBER
) IS
    employee_not_found EXCEPTION;
BEGIN
    -- Check if the employee exists
    DECLARE
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM employees WHERE employee_id = p_employee_id;
        IF v_count = 0 THEN
            RAISE employee_not_found;
        END IF;
    END;

    -- Update the salary
    UPDATE employees
    SET salary = salary + (salary * p_percentage / 100)
    WHERE employee_id = p_employee_id;

    COMMIT;
EXCEPTION
    WHEN employee_not_found THEN
        DBMS_OUTPUT.PUT_LINE('Error: Employee ID does not exist.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: An unexpected error occurred during salary update.');
END UpdateSalary;


Scenario 3:

CREATE OR REPLACE PROCEDURE AddNewCustomer (
    p_customer_id IN NUMBER,
    p_name IN VARCHAR2,
    p_age IN NUMBER,
    p_balance IN NUMBER
) IS
    customer_exists EXCEPTION;
BEGIN
    -- Check if the customer already exists
    DECLARE
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM customers WHERE customer_id = p_customer_id;
        IF v_count > 0 THEN
            RAISE customer_exists;
        END IF;
    END;

    -- Insert the new customer
    INSERT INTO customers (customer_id, name, age)
    VALUES (p_customer_id, p_name, p_age);

    -- Create an account for the new customer
    INSERT INTO accounts (customer_id, balance)
    VALUES (p_customer_id, p_balance);

    COMMIT;
EXCEPTION
    WHEN customer_exists THEN
        DBMS_OUTPUT.PUT_LINE('Error: Customer with the same ID already exists.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: An unexpected error occurred during customer insertion.');
        ROLLBACK;
END AddNewCustomer;
